<style>
    .main-content {
        margin-left: 250px;
        margin-top: 70px;
        padding: 2rem;
        min-height: calc(100vh - 120px);
        background-color: #f8f9fa;
        color: #333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .error-message {
        color: red;
        font-size: smaller;
    }
</style>

<!-- cropper JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<%-include ('../../../views/partials/admin/header')%>

    <section class="main-content">
        <h2 class="content-title">Edit Product</h2>

        <form id="editForm" method="post" action="/admin/edit-product" enctype="multipart/form-data">

            <div>
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" placeholder="Type here" name="productName" class="form-control border"
                    id="productName" value="<%= product.productName %>">
                <div id="productName-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Brand</label>
                <select class="form-select border" name="brand">
                    <% for(let i=0;i < brand.length;i++){ %>
                        <option value="<%= brand[i].brandName %>" <%= brand[i].brandName === product.brand ? 'selected' : '' %>>
                            <%= brand[i].brandName %>
                        </option>
                        <%}%>
                </select>
                <div id="brand-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Full description</label>
                <textarea name="productDescription" class="form-control border"
                 rows="4"><%= product.description %></textarea>
                <div id="description-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Regular price</label>
                <input placeholder="$" name="regularPrice" type="text"
                    value="<%= product.regularPrice %>" class="form-control border">
                <div id="regularPrice-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Sale price</label>
                <input placeholder="$" name="salePrice" type="text" class="form-control border"
                    value="<%= product.salePrice %>">
                <div id="salePrice-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Quantity</label>
                <input placeholder="" name="quantity" type="text" class="form-control border"
                    value="<%= product.quantity %>">
                <div id="quantity-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Color</label>
                <input name="color" type="text" class="form-control border"
                    value="<%= product.color %>">
                <div id="color-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Category</label>
                <select class="form-select border" style="width: 150px;" name="category">
                    <% for(let i=0;i< category.length;i++){ %>
                        <option value="<%= category[i].name %>"  <%= category[i].name === product.category ? 'selected' : '' %>>
                            <%= category[i].name %>
                        </option>
                        <% } %>
                </select>
                <div id="category-error" class="error-message"></div>
            </div>

            <h1>Current Images:</h1>
            <div id="existingImages">
                <% product.productImage.forEach((img, index) => { %>
                <div class="image-box" data-index="<%= index %>">
                    <img src="/uploads/resized-images/<%= img %>" width="100">
                    <button type="button" class="removeImageBtn" data-filename="<%= img %>">Remove</button>
                </div>
                <% }) %>
            </div>

            <% if(product.productImage.length < 4){ %>
                <h1>Add New Images</h1>
                <div id="input-field-error" class="error-message"></div>
                <% for (let i=0; i < 4-product.productImage.length; i++) { %>
                <input name="images" type="file" class="imageInput form-control border" id="imageInputField<%= i %>"
                        accept="image/*"><br>
                <div id="preview<%= i %>" class="previewContainer"></div>
                <% } %>
            <% } %>

            <div style="height: 3rem;"></div>
            <button type="submit" id="submitBtn" class="btn btn-success">Update Product</button>


        </form>



    </section>
<%-include ('../../../views/partials/admin/footer')%>


<script>
    const form = document.getElementById('editForm');
    const croppedImages = new Array(4).fill(null);
    let currentImages = [...<%- JSON.stringify(product.productImage) %>];

//    no problem if we don't copy the array.but it's better to copy.it doesn't change the original array if we make change in this copied array.

//     product.images is look like ['img1.jpg','img2.jpg']/ it is server side JS array, browser doesn't understand server side.it only uderstands client side.
//     if we write like >>> let currentImages=[...<%-product.images%>].
//     the currentImages look like=[img1.jpg,img2.jpg]. no quotes for the elements.so elements are not strings.it is like variables
//     so browser thinks that elements(img1.jpg,img2.jpg) are like variables, browser looks for that not exisiting variables.and throw error.

//     we need array element with quotes like ['img1.jpg','img2.jpg'].
//     that is why we use JSON.stringify. so it helps to convert the server side array to JS literal.adds quotes around strings.
//     for example: server side array==>['img1.jpg'] .if we use JSON.stringify(product.images) the array looks like ===> '["img1.jpg"]' 
//     if we don't use it will look like==>[img1.jpg], so browser thinks that is a variable.

//     Why use <%- %> instead of <%= %>?
//     if we use <%= %>. the array looks like ==>["img1.jpg", &quot;img2.jpg&quot;].this is escaped output
//     we need the array as it is and unescaped, that is why use <%- %>
//     for example: let's say user.name=<p>hello</p>

//     if we use <..%=user.name %>. the output look like ==>&lt;p&gt;hello&lt;p&gt;
//     if we use <..%- user.name %>. the output looks like ==><p>hello</p>
    


    document.querySelectorAll('.removeImageBtn').forEach(btn => {
        btn.addEventListener('click', () => {
        const confirmDelete = confirm('Are you sure you want to remove this image?');
        if (!confirmDelete) return;

        const filename = btn.dataset.filename;
        const container = btn.closest('.image-box');
        container.remove();
        currentImages = currentImages.filter(img => img !== filename);
        });
    });

    for (let i = 0; i < 4; i++) {
    const imageInputField = document.getElementById('imageInputField' + i);
    const preview = document.getElementById('preview' + i);

    imageInputField.addEventListener('change', () => {
      preview.innerHTML = '';
      croppedImages[i] = null;

      if (!imageInputField.files || !imageInputField.files[0]) return;

      const file = imageInputField.files[0];
      const reader = new FileReader();

      reader.onload = () => {
        const img = document.createElement('img');
        img.src = reader.result;
        img.style.maxWidth = '200px';
        preview.appendChild(img);

        const cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 1,
        });

        const cropBtn = document.createElement('button');
        cropBtn.textContent = 'Crop & Save';
        cropBtn.type = 'button';
        preview.appendChild(cropBtn);

        cropBtn.onclick = () => {
          const canvas = cropper.getCroppedCanvas({ width: 500, height: 500 });
          canvas.toBlob(blob => {
            croppedImages[i] = { blob, name: file.name };
            preview.innerHTML = '';

            const croppedImg = document.createElement('img');
            croppedImg.src = URL.createObjectURL(blob);
            croppedImg.style.width = '100px';
            preview.appendChild(croppedImg);

            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'Remove';
            removeBtn.type = 'button';
            removeBtn.onclick = () => {
              croppedImages[i] = null;
              input.value = '';
              preview.innerHTML = '';
            };
            preview.appendChild(removeBtn);
            updateSubmitBtn();
          });
        };
      };

      reader.readAsDataURL(file);
    });
  }


   form.addEventListener('submit', function (e) {
    e.preventDefault();

    const totalImages = currentImages.length + croppedImages.filter(Boolean).length;
    if (totalImages < 3) return alert('Minimum 3 images are required.');
    if (totalImages > 4) return alert('Maximum 4 images allowed.');

    const formData = new FormData(form);
    formData.append('existingImages', JSON.stringify(currentImages));

    croppedImages.forEach(item => {
      if (item) {
        formData.append('images', item.blob, item.name);
      }
    });

    fetch(form.action, {
      method: 'POST',
      body: formData,
    }).then(res => {
      if (res.ok) {
        alert('Product updated successfully!');
        window.location.href = '/products';
      } else {
        alert('Failed to update product.');
      }
    });
  });



  form.addEventListener('submit', function(event){
            console.log('form submitting...........');
            const productName=document.getElementsByName('productName')[0].value;
            const brand = document.getElementsByName('brand')[0].value;
            const productDescription=document.getElementsByName('productDescription')[0].value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const quantity = document.getElementsByName('quantity')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value;


            clearErrorMessages();//clearing all the current error messages
            console.log("form submission")
            console.log(productName)

            if (productName.trim() === "") {
                console.log("productName:",productName);
                displayErrorMessage('productName-error', 'Please enter a product name.');
                event.preventDefault();
                return;
            }
            if (!/^[a-zA-Z\s]+$/.test(productName.trim())) {
                displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
                event.preventDefault();
                return;
            }

            if (productDescription.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                event.preventDefault();
                return;
            }
            if (!/^[a-zA-Z\s]+$/.test(productDescription.trim())) {
                displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
                event.preventDefault();
                return;
            }

            if (quantity.trim()==="" || parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                event.preventDefault();
                return;
            }

            if (price.trim()==="" || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                event.preventDefault();
                return;
            }

            if (saleprice.trim()==="" || !/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                event.preventDefault();
                return;
            }
            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                event.preventDefault();
                return;
            }

            if (color.trim() === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                event.preventDefault();
                return;
            }


            const croppedImageCount = croppedImages.filter(img => img !== null).length;
            //getting cropped images count.
            //if there is no cropped images,then the croppedImage array will be = [null,null,null,null]
            //so the not null values is 0. so the croppedImageCount will be = zero
            if(croppedImageCount < 3){
                event.preventDefault();//product should atleast need 3 cropped images.
                displayErrorMessage('input-field-error',"Please choose at least 3 images")
                console.log("croppedImageCount:",croppedImageCount)
                return;
            }

            const totalImages = currentImages.length + croppedImages.filter(Boolean).length;
            if (totalImages < 3){
                e.preventDefault();
                displayErrorMessage('input-field-error',"Please upload at least 3 images");
                console.log("totalImages.length:",totalImages.length)
            }
            if (totalImages > 4){
                e.preventDefault();
                displayErrorMessage('input-field-error',"Maximum 4 images allowed");
                console.log("totalImages.length:",totalImages.length) 
            } 
        });

        function displayErrorMessage(elementId, message) {
            console.log("displayErrorMessage has started.elementId:",elementId)
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            console.log('clearErrorMessage() has started')
            const errorElements = document.getElementsByClassName('error-message');
            console.log("error elements:",errorElements)
            Array.from(errorElements).forEach(element => {
                console.log("before:::::",element);
                element.innerHTML = "";
                console.log("after:::::",element)
            });
        }

</script>