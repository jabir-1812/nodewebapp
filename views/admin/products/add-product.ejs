<style>
    .main-content {
        margin-left: 250px;
        margin-top: 70px;
        padding: 2rem;
        min-height: calc(100vh - 120px);
        background-color: #f8f9fa;
        color: #333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .error-message{
        color: red;
        font-size: smaller;
    }
</style>

<!-- cropper JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<%-include ('../../../views/partials/admin/header')%>
    <section class="main-content">
        <h2 class="content-title">Add New Product</h2>

        <form id="addProductForm" method="post" action="/admin/add-products" 
            enctype="multipart/form-data">

            <div>
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" placeholder="Type here" 
                       name="productName" class="form-control border" 
                       id="productName">
                <div id="productName-error" class="error-message"></div>
            </div>
            

            <div>
                <label class="form-label">Brand</label>
                <select class="form-select border" name="brand">
                    <% for(let i=0;i< brand.length;i++){ %>
                        <option value="<%= brand[i].brandName %>">
                            <%= brand[i].brandName %>
                        </option>
                        <%}%>
                </select>
                <div id="brand-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Full description</label>
                <textarea placeholder="Type here" name="productDescription" 
                          class="form-control border"rows="4"></textarea>
                <div id="description-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Regular price</label>
                <input placeholder="$" name="regularPrice" 
                       type="text" class="form-control border">
                <div id="regularPrice-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Sale price</label>
                <input placeholder="$" name="salePrice" 
                       type="text" class="form-control border">
                <div id="salePrice-error" class="error-message"></div>
            </div>

            
            <div>
                <label class="form-label">Quantity</label>
                <input placeholder="" name="quantity" 
                       type="text" class="form-control border">
                <div id="quantity-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Color</label>
                <input name="color" type="text" class="form-control border">
                <div id="color-error" class="error-message"></div>
            </div>


            <div>
                <label class="form-label">Category</label>
                <select class="form-select border" style="width: 150px;" name="category">
                <% for(let i=0;i< category.length;i++){ %>
                    <option value="<%= category[i].name %>">
                        <%= category[i].name %>
                    </option>
                    <% } %>
            </select>
            <div id="category-error" class="error-message"></div>
            </div>

            
            <h1>Choose images</h1>
            <div id="input-field-error" class="error-message"></div>
            <% for (let i = 0; i < 4; i++) { %>
            <input name="images" type="file" class="imageInput form-control border" id="imageInputField<%= i %>" accept="image/*"><br>
            <div id="preview<%= i %>" class="previewContainer"></div>
            <% } %>

            <div style="height: 3rem;"></div>
            <button type="submit" id="submitBtn" class="btn btn-success">Add Product</button>
        </form>



    </section>
    <%-include ('../../../views/partials/admin/footer')%>

    <!-- cropper JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <script>

        const form = document.getElementById('addProductForm');
        const croppedImages=new Array(4).fill(null); //croppedImages=[null,null,null,null]

        form.addEventListener('submit', function(event){
            console.log('form submitting...........');
            const productName=document.getElementsByName('productName')[0].value;
            const brand = document.getElementsByName('brand')[0].value;
            const productDescription=document.getElementsByName('productDescription')[0].value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const quantity = document.getElementsByName('quantity')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value;


            clearErrorMessages();//clearing all the current error messages
            console.log("form submission")
            console.log(productName)

            if (productName.trim() === "") {
                console.log("productName:",productName);
                displayErrorMessage('productName-error', 'Please enter a product name.');
                event.preventDefault();
                return;
            }
            // Validate Product Name: allow letters, spaces, hyphens, apostrophes, and basic international characters
            if (!/^[A-Za-zÀ-ÿ\s'-]+$/.test(productName.trim())) {
                displayErrorMessage('productName-error', 'Product name should contain only letters, spaces, hyphens, or apostrophes.');
                event.preventDefault();
                return;
            }

            // Validate Product Description: allow letters, numbers, punctuation, spaces, and basic symbols
            if (productDescription.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                event.preventDefault();
                return;
            }

            if (!/^[\wÀ-ÿ0-9\s.,!'"%():;?-]+$/.test(productDescription.trim())) {
                displayErrorMessage('description-error', 'Product description contains invalid characters.');
                event.preventDefault();
                return;
            }

            if (quantity.trim()==="" || parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                event.preventDefault();
                return;
            }

            if (price.trim()==="" || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                event.preventDefault();
                return;
            }

            if (saleprice.trim()==="" || !/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                event.preventDefault();
                return;
            }
            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                event.preventDefault();
                return;
            }

            if (color.trim() === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                event.preventDefault();
                return;
            }


            const croppedImageCount = croppedImages.filter(img => img !== null).length;
            //getting cropped images count.
            //if there is no cropped images,then the croppedImage array will be = [null,null,null,null]
            //so the not null values is 0. so the croppedImageCount will be = zero
            if(croppedImageCount < 3){
                event.preventDefault();//product should atleast need 3 cropped images.
                displayErrorMessage('input-field-error',"Please choose at least 3 images")
                console.log("croppedImageCount:",croppedImageCount)
                return;
            }

        });

        for(let i=0;i<4;i++){
                const imageInputField=document.getElementById('imageInputField'+i);
                const preview=document.getElementById('preview'+i);//previewing <div> element
                // after user chosing the file in <input> field
                // the chosen image previewed in this <div> element

                imageInputField.addEventListener('change', function (){
                    console.log('imageInputField event listner started when user choosing file')
                    preview.innerHTML='';
                    croppedImages[i]=null;//every time user chooses a new file,
                    //  the previous cropped image should be gone, that is why we assigning null

                    if(!imageInputField.files || !imageInputField.files[0]){
                        return;
                    }
                    //if there is no images chosen in the input field
                    //means, we don't have images to crop. that is why we use return keyword

                    const file=imageInputField.files[0];//if user select multiple images by one <input> tag.
                    console.log('file:',file)  //imageInputField[0] is a object,like :{name:"filename.jpg",size:100kb,type:"png",lastModified:"",etc....}
                    //we can only take the first image, and avoid others.
                    //we only accepts one image per <input tag>
                    const reader=new FileReader();

                    reader.onload=()=>{
                        const img=document.createElement('img')//creating an <img>
                        img.src=reader.result;
                        img.style.maxWidth='200px';
                        preview.appendChild(img); // <div>
                                                         //<img>
                                                  // </div>

                        const cropper=new Cropper(img,{
                            aspectRatio:1,
                            viewMode:1,
                            autoCropArea:1,
                        });

                        const cropButton=document.createElement('button')//creating the <button>
                        cropButton.type='button';
                        cropButton.textContent='Crop & Save';
                        cropButton.classList.add('btn', 'btn-dark');
                        preview.appendChild(cropButton);// <div>
                                                            //<img>
                                                            //<button> Crop & Save </button>
                                                        // </div>
                        cropButton.onclick=()=>{
                            const canvas=cropper.getCroppedCanvas({width:500,height:500});
                            canvas.toBlob(blob=>{
                                croppedImages[i]={blob,name:file.name};
                                let fileName=file.name;
                                let imgFile=new File([blob],fileName,{type:blob.type});

                                const fileList=new DataTransfer();
                                fileList.items.add(imgFile);
                                imageInputField.files=fileList.files;
                                
                                preview.innerHTML='';// <div>
                                                    //''
                                                    // </div>


                                const croppedImg=document.createElement('img')//creating the <img>
                                //note:it is not croppedImages[] array.
                                //it is a cropped image only.
                                croppedImg.src=URL.createObjectURL(blob);
                                croppedImg.style.width='100px';
                                preview.appendChild(croppedImg)// <div>
                                                                      //<img>
                                                                // </div>

                                const removeBtn=document.createElement('button'); //creating remove button
                                removeBtn.textContent='Remove';
                                removeBtn.type='button';
                                removeBtn.classList.add('btn', 'btn-outline-danger')
                                removeBtn.onclick=()=>{
                                    croppedImages[i]=null;
                                    imageInputField.value='';
                                    preview.innerHTML='';
                                }
                                preview.appendChild(removeBtn);
                            })
                        }
                    }

                    reader.readAsDataURL(file)
                })

            }
    

    function displayErrorMessage(elementId, message) {
        console.log("displayErrorMessage has started.elementId:",elementId)
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        console.log('clearErrorMessage() has started')
        const errorElements = document.getElementsByClassName('error-message');
        console.log("error elements:",errorElements)
        Array.from(errorElements).forEach(element => {
            console.log("before:::::",element);
            element.innerHTML = "";
            console.log("after:::::",element)
        });
    }


       
    </script>

    