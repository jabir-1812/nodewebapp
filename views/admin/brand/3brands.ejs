<style>
  .main-content {
    margin-left: 250px;
    margin-top: 70px;
    padding: 2rem;
    min-height: calc(100vh - 120px);
    background-color: #f8f9fa;
    color: #333;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  .main-content nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e0e0e0;
  }

  .main-content nav h1 {
    font-size: 1.8rem;
    color: #2c3e50;
    margin: 0;
    font-weight: 600;
  }

  .main-content nav a {
    background-color: #000000;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.3s;
  }

  .main-content nav a:hover {
    background-color: #585858;
  }

  .search-container {
    margin-bottom: 2rem;
  }

  .search-container form {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .search-container input {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 300px;
    font-size: 1rem;
  }

  /* .btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.3s;
  } */

  /* .btn-dark {
    background-color: #000000;
    color: white;
  }

  .btn-dark:hover {
    background-color: #4d4d4d;
  }

  .btn-outline-dark {
    background-color: transparent;
    color: #343a40;
    border: 1px solid #343a40;
  }

  .btn-outline-dark:hover {
    background-color: #343a40;
    color: white;
  } */

  table {
    width: 100%;
    border-collapse: collapse;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
    border-radius: 8px;
    overflow: hidden;
  }

  th, td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #e0e0e0;
  }

  th {
    background-color: #000000;
    color: #ffffff;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.8rem;
    letter-spacing: 0.5px;
  }

  tr:hover {
    background-color: #e0e0e0;
  }

  img {
    max-width: 80px;
    max-height: 40px;
    object-fit: contain;
  }

  /* .action-btn {
    padding: 0.4rem 0.8rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    margin-right: 0.5rem;
    transition: all 0.3s;
  } */

  /* .edit-btn {
    background-color: #f6c23e;
    color: #2c3e50;
    text-decoration: none;
    display: inline-block;
    margin-right: 0.5rem;
  }

  .edit-btn:hover {
    background-color: #e4b22e;
  }

  .block-btn {
    background-color: #e74a3b;
    color: white;
  }

  .block-btn:hover {
    background-color: #d62c1a;
  }

  .unblock-btn {
    background-color: #1cc88a;
    color: white;
  }

  .unblock-btn:hover {
    background-color: #17a673;
  } */

  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
    gap: 0.5rem;
  }

  .pagination a {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-decoration: none;
    color: #000000;
    transition: all 0.3s;
  }

  .pagination a:hover {
    background-color: #d1d1d1;
  }

  .pagination a.active {
    background-color: #000000;
    color: white;
    border-color: #000000;
  }

  .no-data {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
    font-style: italic;
  }
</style>

<%-include ('../../../views/partials/admin/header')%>

<section class="main-content">
  <nav>
    <h1>Brand Management</h1>
    <a href="/admin/add-brand">Add New Brand</a>
  </nav>

  <div class="search-container">
    <form action="/admin/brands" method="GET">
      <input type="text" name="search" value="<%= search %>" placeholder="Search brands...">
      <button type="submit" class="btn btn-dark">Search</button>
      <% if (search) { %>
        <a href="/admin/brands" class="btn btn-outline-dark">Clear</a>
      <% } %>
    </form>
  </div>

  <table>
    <thead>
      <tr>
        <th>Brand</th>
        <th>Logo</th>
        <th>Offer%</th>
        <th>Offer actions</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% if (brands.length> 0){ %>
        <% brands.forEach((brand,index)=>{ %>
          <tr>
            <td><%= brand.brandName %></td>
            <td>
              <img src="/uploads/resized-images/<%= brand.brandImage[0] %>" alt="<%= brand.brandName %>" />
            </td>
            <td><%= brand.offer %> %</td>
            <td>
              <% if(brand.offer===0){ %>
                <button class="btn btn-outline-primary" onclick="addOffer('<%= brand._id %>')">Add Offer</button>
                <%}else{%>
                  <button class="btn btn-outline-danger" onclick="removeOffer('<%= brand._id %>')">Remove Offer</button>
                  <% } %>
            </td>
            <td 
                id="status-<%= index %>" 
                class="<%= brand.isBlocked ? 'text-danger' : 'text-success' %>">
                <%= brand.isBlocked ? 'Blocked' : 'Active' %>
            </td>
            <td>
              <a href="/admin/edit-brand/<%= brand._id %>" class="btn btn-outline-dark">Edit</a>
               <button type="button" 
                                    class="<%= brand.isBlocked ? 'btn btn-success' : 'btn btn-danger' %>"
                                    id="brand-<%= brand._id %>"
                                    data-brand-id="<%= brand._id %>"
                                    data-is-blocked="<%= brand.isBlocked %>"
                                    onclick="toggleBlockBrand(this,'<%= index %>')">
                                <%= brand.isBlocked ? "Unblock" : "Block" %>        
                            </button>
            </td>
          </tr>
        <% }) %>
      <% }else{ %>
        <tr>
          <td colspan="4" class="no-data">No brands found</td>
        </tr>
      <% } %>
    </tbody>
  </table>
  
  <% if (totalPages > 1) { %>
    <div class="pagination">
      <% if (currentPage > 1) { %>
        <a href="/admin/brands?page=<%= currentPage - 1 %>&search=<%= search %>">Previous</a>
      <% } %>

      <% for(let i=1; i <=totalPages; i++) { %>
        <a href="/admin/brands?page=<%= i %>&search=<%= search %>" class="<%= currentPage === i ? 'active' : '' %>">
          <%= i %>
        </a>
      <% } %>

      <% if (currentPage < totalPages) { %>
        <a href="/admin/brands?page=<%= currentPage + 1 %>&search=<%= search %>">Next</a>
      <% } %>
    </div>
  <% } %>
</section>

<%-include ('../../../views/partials/admin/footer')%>

<script>
async function addOffer(brandId) {
            const {value:percentage}=await Swal.fire({
                title:"Offer in percentage",
                input:"number",
                inputLabel:"Percentage",
                inputPlaceholder:"%"
            });

            if(percentage){
                try {
                    const response=await fetch('/admin/add-brand-offer',{
                        method:'POST',
                        headers:{
                            'content-type':'application/json'
                        },
                        body:JSON.stringify({
                            percentage:percentage,
                            brandId:brandId
                        })
                    })

                    const responseJson=await response.json();
                    if(response.ok && responseJson.status===true){
                        Swal.fire(
                            "Offer Added",
                            "The offer has been added",
                            "success"
                        ).then(()=>{
                            // Update the UI after adding offer
                            const button = document.querySelector(`button[onclick="addOffer('${brandId}')"]`);
                            if (button) {
                                button.textContent = "Remove Offer";
                                button.classList.remove("btn-outline-primary");
                                button.classList.add("btn-outline-danger");
                                button.setAttribute("onclick", `removeOffer('${brandId}')`);
                                // Update the offer% text in the row
                                const row = button.closest("tr");
                                if (row) {
                                    row.querySelector("td:nth-child(3)").textContent = `${percentage} %`;
                                }
                            }
                        })
                    }else{
                        Swal.fire("Failed",responseJson.message || "Adding offer failed","error");
                    }
                } catch (error) {
                    Swal.fire(
                        "Error",
                        "An error occured while adding the offer",
                        "error"
                    );

                    console.log('Error Adding offer:',error)
                }
            }
        }



  async function removeOffer(brandId) {
            try {
                const result =await Swal.fire({
                    title:`Remove this offer?`,
                    icon:'warning',
                    showCancelButton:true,
                    confirmButtonText:'Yes',
                    cancelButtonText:'Cancel'
                })
                if(result.isConfirmed){
                    const response=await fetch('/admin/remove-brand-offer',{
                        method:"POST",
                        headers:{
                        "content-type":"application/json"
                        },
                        body:JSON.stringify({
                            brandId:brandId
                        })
                    })

                    const responseJson=await response.json();

                    if(response.ok && responseJson.status===true){
                     Swal.fire(
                        "Offer removed",
                        "The offer has been removed",
                        "success"
                        ).then(()=>{
                            // Update the UI after removing offer
                            const button = document.querySelector(`button[onclick="removeOffer('${brandId}')"]`);
                            if (button) {
                                button.textContent = "Add Offer";
                                button.classList.remove("btn-outline-danger");
                                button.classList.add("btn-outline-primary");
                                button.setAttribute("onclick", `addOffer('${brandId}')`);
                                // Update the offer% text in the row
                                const row = button.closest("tr");
                                if (row) {
                                    row.querySelector("td:nth-child(3)").textContent = `0 %`;
                                }
                            }
                        })
                    }else{
                        Swal.fire("Failed",responseJson.message || "Removing offer failed","error");
                    }
                }
                
            } catch (error) {
                Swal.fire(
                    "Error",
                    "An error occured while removing the offer",
                    "error"
                );
                console.log("Error removing offer:",error)
            }
        }


  async function toggleBlockBrand(button,index) {
    try {
      const brandId=button.dataset.brandId;
      const isBlocked=button.dataset.isBlocked==='true';
      const action=isBlocked ? "Unblock" : "Block";

      if(action==="Block"){
        const result=await Swal.fire({
          title:`Are you sure you want to Block this brand`,
          icon:'warning',
          showCancelButton:true,
          confirmButtonText:'Yes, Block this brand',
          cancelButtonText:'Cancel'
        });

        if(result.isConfirmed){
          const response=await fetch('/admin/block-brand',{
            method:'post',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify({brandId})
          });

          const data=await response.json();
          await Swal.fire("Done",data.message);
          if(data.success){
            const blockToggleButton=document.getElementById(`brand-${brandId}`);
            blockToggleButton.textContent="Unblock";
            blockToggleButton.className="";
            blockToggleButton.classList.add('btn','btn-success')
            blockToggleButton.dataset.isBlocked="true";

            const status=document.getElementById(`status-${index}`);
            status.innerText="Blocked";
            status.className="";
            status.classList.add('text-danger');
          }
        }
      }


      if(action==="Unblock"){
        const result=await Swal.fire({
          title:`Are you sure you want to Unblock this brand`,
          icon:'warning',
          showCancelButton:true,
          confirmButtonText:'Yes, Unblock this brand',
          cancelButtonText:'Cancel'
        });

        if(result.isConfirmed){
          const response=await fetch('/admin/unblock-brand',{
            method:'post',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify({brandId})
          });

          const data=await response.json();
          await Swal.fire("Done",data.message);
          if(data.success){
            const blockToggleButton=document.getElementById(`brand-${brandId}`);
            blockToggleButton.textContent="Block";
            blockToggleButton.className="";
            blockToggleButton.classList.add('btn','btn-danger')
            blockToggleButton.dataset.isBlocked="false";

            const status=document.getElementById(`status-${index}`);
            status.innerText="Active";
            status.className="";
            status.classList.add('text-success');
          }
        }
      }
    } catch (error) {
      console.log("error fetching:",error)
    }
  }
</script>