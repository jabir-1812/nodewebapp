<style>
    .main-content {
        margin-left: 250px;
        margin-top: 70px;
        padding: 2rem;
        min-height: calc(100vh - 120px);
        background-color: #f8f9fa;
    }
    
    .form-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
        padding: 2rem;
        max-width: 800px;
        margin: 0 auto;
    }
    
    h1 {
        color: #343a40;
        margin-bottom: 1.5rem;
        font-weight: 600;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #495057;
    }
    
    input[type="text"],
    input[type="date"],
    textarea {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }
    
    input[type="text"]:focus,
    input[type="date"]:focus,
    textarea:focus {
        border-color: #80bdff;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    textarea {
        min-height: 120px;
        resize: vertical;
    }
    
    .error-message {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 0.5rem;
        display: none;
    }
    
    .btn-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }
    
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s;
        border: none;
    }
    
    .btn-dark {
        background-color: #343a40;
        color: white;
    }
    
    .btn-dark:hover {
        background-color: #23272b;
    }
    
    .btn-outline-dark {
        background-color: transparent;
        border: 1px solid #343a40;
        color: #343a40;
    }
    
    .btn-outline-dark:hover {
        background-color: #343a40;
        color: white;
    }
    
    .btn-outline-danger {
        background-color: transparent;
        border: 1px solid #dc3545;
        color: #dc3545;
    }
    
    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }
    
    .image-upload-section {
        border: 2px dashed #ced4da;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        margin-bottom: 1.5rem;
        background-color: #f8f9fa;
    }
    
    .image-upload-section h2 {
        margin-top: 0;
        margin-bottom: 1rem;
        color: #495057;
        font-size: 1.25rem;
    }
    
    #preview {
        margin: 1rem 0;
        text-align: center;
    }
    
    #preview img {
        max-width: 100%;
        max-height: 400px;
        border-radius: 4px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    .cropper-controls {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .file-input-wrapper {
        position: relative;
        overflow: hidden;
        display: inline-block;
    }
    
    .file-input-wrapper input[type="file"] {
        font-size: 100px;
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
    }
    
    .file-input-button {
        padding: 0.75rem 1.5rem;
        background-color: #007bff;
        color: white;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .file-input-button:hover {
        background-color: #0069d9;
    }
    
    .no-image-placeholder {
        color: #6c757d;
        font-style: italic;
        padding: 2rem 0;
    }
    
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding: 1rem;
        }
        
        .form-container {
            padding: 1rem;
        }
        
        .btn-group {
            flex-direction: column;
        }
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<%- include("../../../views/partials/admin/header") %>

<section class="main-content">
    <div class="form-container">
        <h1>Add New Banner</h1>

        <form id="addBannerForm">
            <div class="form-group">
                <label for="bannerTitle">Banner Title</label>
                <input type="text" name="title" id="bannerTitle" placeholder="Enter banner title">
                <div id="bannerTitle-error" class="error-message"></div>
            </div>
            
            <div class="form-group">
                <label for="description">Description</label>
                <textarea name="description" id="description" placeholder="Enter banner description"></textarea>
                <div id="description-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" name="startDate">
                <div id="startDate-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" name="endDate">
                <div id="endDate-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="bannerLink">Link</label>
                <input type="text" name="link" id="bannerLink" placeholder="Enter banner link (URL)">
                <div id="bannerLink-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <div class="image-upload-section">
                    <h2>Choose Banner Image</h2>
                    <div id="preview">
                        <p class="no-image-placeholder">No image selected</p>
                    </div>
                    <div class="file-input-wrapper">
                        <button type="button" class="file-input-button">
                            <i class="fas fa-upload"></i> Select Image
                        </button>
                        <input type="file" name="image" id="imageInputField" accept="image/*">
                    </div>
                    <div id="bannerImage-error" class="error-message"></div>
                </div>
            </div>

            <div class="btn-group">
                <button type="submit" class="btn btn-dark">Submit</button>
                <a href="/admin/banners" class="btn btn-outline-dark">Cancel</a>
            </div>
        </form>
    </div>
</section>

<%- include("../../../views/partials/admin/footer") %>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const form = document.getElementById('addBannerForm');
    // Error elements
    const bannerTitleError = document.getElementById('bannerTitle-error');
    const descriptionError = document.getElementById('description-error');
    const startDateError = document.getElementById('startDate-error');
    const endDateError = document.getElementById('endDate-error');
    const bannerLinkError = document.getElementById('bannerLink-error');
    const bannerImageError = document.getElementById('bannerImage-error');

    const errorElements = document.getElementsByClassName('error-message');

    const imageInputField = document.getElementById('imageInputField');
    const croppedImage = new Array(1).fill(null);
    const preview = document.getElementById('preview');

    // Set minimum date for start and end dates to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').min = today;
    document.getElementById('endDate').min = today;

    // Update end date min when start date changes
    document.getElementById('startDate').addEventListener('change', function() {
        const startDate = this.value;
        document.getElementById('endDate').min = startDate;
    });

    imageInputField.addEventListener('change', function() {
        preview.innerHTML = "";
        bannerImageError.style.display = 'none';

        if (!imageInputField.files || !imageInputField.files[0]) {
            preview.innerHTML = '<p class="no-image-placeholder">No image selected</p>';
            return;
        }

        const file = imageInputField.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
            const imgContainer = document.createElement('div');
            imgContainer.style.maxWidth = '100%';
            imgContainer.style.margin = '0 auto';
            
            const img = document.createElement('img');
            img.src = reader.result;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '400px';
            imgContainer.appendChild(img);
            preview.appendChild(imgContainer);

            const cropper = new Cropper(img, {
                aspectRatio: 16/9, // Common banner aspect ratio
                viewMode: 1,
                autoCropArea: 1,
                responsive: true,
                guides: false
            });

            const controlsDiv = document.createElement('div');
            controlsDiv.className = 'cropper-controls';

            const cropButton = document.createElement('button');
            cropButton.type = "button";
            cropButton.textContent = "Crop & Save";
            cropButton.classList.add('btn', 'btn-dark');

            const cancelButton = document.createElement('button');
            cancelButton.type = 'button';
            cancelButton.textContent = 'Cancel';
            cancelButton.classList.add('btn', 'btn-outline-dark');
            cancelButton.onclick = () => {
                preview.innerHTML = '<p class="no-image-placeholder">No image selected</p>';
                imageInputField.value = '';
            };

            controlsDiv.appendChild(cropButton);
            controlsDiv.appendChild(cancelButton);
            preview.appendChild(controlsDiv);

            cropButton.onclick = () => {
                const canvas = cropper.getCroppedCanvas({ width: 1200, height: 675 }); // HD banner size
                canvas.toBlob(blob => {
                    croppedImage[0] = { blob, name: file.name };
                    let fileName = file.name;
                    let imgFile = new File([blob], fileName, { type: blob.type });

                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    imageInputField.files = fileList.files;

                    preview.innerHTML = '';

                    const croppedImg = document.createElement('img');
                    croppedImg.src = URL.createObjectURL(blob);
                    croppedImg.style.maxWidth = '100%';
                    croppedImg.style.maxHeight = '400px';
                    croppedImg.style.borderRadius = '4px';
                    preview.appendChild(croppedImg);

                    const removeBtn = document.createElement('button');
                    removeBtn.textContent = "Remove Image";
                    removeBtn.type = "button";
                    removeBtn.classList.add('btn', 'btn-outline-danger', 'mt-2');
                    removeBtn.onclick = () => {
                        croppedImage[0] = null;
                        imageInputField.value = '';
                        preview.innerHTML = '<p class="no-image-placeholder">No image selected</p>';
                    };
                    preview.appendChild(removeBtn);
                });
            }
        }

        reader.readAsDataURL(file);
    });

    // Form validation
    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Clearing error messages
        Array.from(document.querySelectorAll('.error-message')).forEach(element => {
            element.innerHTML = "";
            element.style.display = 'none';
        });

        const bannerTitle = document.getElementById('bannerTitle').value;
        const description = document.getElementById('description').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const bannerLink = document.getElementById('bannerLink').value;

        let isValid = true;

        if (bannerTitle.trim() === "") {
            bannerTitleError.innerText = "Banner title is required";
            bannerTitleError.style.display = 'block';
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s\-&.,!?()'"@]+$/.test(bannerTitle.trim())) {
            bannerTitleError.innerText = "Contains invalid characters";
            bannerTitleError.style.display = 'block';
            isValid = false;
        }

        if (description.trim() === "") {
            descriptionError.innerText = 'Description is required';
            descriptionError.style.display = 'block';
            isValid = false;
        } else if (description.length > 500) {
            descriptionError.innerText = 'Description should be less than 500 characters';
            descriptionError.style.display = 'block';
            isValid = false;
        }

        if (startDate === "") {
            startDateError.innerText = "Start date is required";
            startDateError.style.display = 'block';
            isValid = false;
        }

        if (endDate === "") {
            endDateError.innerText = "End date is required";
            endDateError.style.display = 'block';
            isValid = false;
        } else if (startDate && new Date(endDate) < new Date(startDate)) {
            endDateError.innerText = "End date must be after start date";
            endDateError.style.display = 'block';
            isValid = false;
        }

        if (bannerLink.trim() === "") {
            bannerLinkError.innerText = "Link is required";
            bannerLinkError.style.display = "block";
            isValid = false;
        } else if (!/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(bannerLink.trim())) {
            bannerLinkError.innerText = "Please enter a valid URL";
            bannerLinkError.style.display = "block";
            isValid = false;
        }

        if (!imageInputField.files || !imageInputField.files[0]) {
            bannerImageError.innerText = "Please select an image";
            bannerImageError.style.display = 'block';
            isValid = false;
        } else if (croppedImage.filter(img => img !== null).length < 1) {
            bannerImageError.innerText = "Please crop and save your image";
            bannerImageError.style.display = 'block';
            isValid = false;
        }

        if (!isValid) {
            return;
        }

        // Submit form
        const formData = new FormData(form);
        
        try {
            const response = await fetch('/admin/add-banner', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: "Banner added successfully",
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    window.location.href = "/admin/banners";
                });
            } else {
                Swal.fire({
                    title: "Error!",
                    text: result.message || "Failed to add banner",
                    icon: "error"
                });
            }
        } catch (error) {
            Swal.fire({
                title: "Error!",
                text: "An unexpected error occurred",
                icon: "error"
            });
            console.error("Error:", error);
        }
    });
</script>