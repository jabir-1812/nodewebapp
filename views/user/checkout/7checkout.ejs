
<%-include ('../../../views/partials/user/header') %>

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4a6cf7;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7ff;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 30px;
        }

        @media (min-width: 992px) {
            .checkout-grid {
                grid-template-columns: 7fr 5fr;
            }
        }

        .card {
            background: white;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            padding: 25px;
            margin-bottom: 25px;
        }

        .card-header {
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 15px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        h1, h2, h3, h4, h5 {
            color: var(--dark-color);
            margin-bottom: 15px;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            text-align: center;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #3a5ad9;
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline:hover {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 5px;
        }

        /* Address Section */
        .address-item {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            position: relative;
            transition: var(--transition);
        }

        .address-item:hover {
            border-color: var(--primary-color);
        }

        .address-item.selected {
            border-color: var(--primary-color);
            background-color: rgba(74, 108, 247, 0.05);
        }

        .address-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .address-type {
            font-weight: 600;
            color: var(--primary-color);
        }

        .address-content {
            margin-bottom: 15px;
        }

        .address-actions {
            display: flex;
            gap: 10px;
        }

        .address-form-container {
            margin-top: 15px;
            padding: 15px;
            border: 1px dashed var(--border-color);
            border-radius: 8px;
            background-color: var(--light-color);
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
        }

        @media (min-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr 1fr 1fr;
            }
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-family: 'Poppins', sans-serif;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        /* Cart Items */
        .cart-table {
            width: 100%;
            border-collapse: collapse;
        }

        .cart-table th, .cart-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .cart-table th {
            background-color: var(--light-color);
            font-weight: 600;
        }

        .product-info {
            display: flex;
            align-items: center;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 15px;
        }

        .product-details h5 {
            margin-bottom: 5px;
        }

        .product-details p {
            color: var(--secondary-color);
            font-size: 14px;
            margin-bottom: 0;
        }

        .quantity-control {
            display: flex;
            align-items: center;
        }

        .quantity-btn {
            width: 30px;
            height: 30px;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity-input {
            width: 45px;
            height: 30px;
            text-align: center;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin: 0 5px;
        }

        /* Payment Section */
        .payment-option {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            transition: var(--transition);
        }

        .payment-option:hover {
            border-color: var(--primary-color);
        }

        .payment-option.selected {
            border-color: var(--primary-color);
            background-color: rgba(74, 108, 247, 0.05);
        }

        .payment-option input {
            margin-right: 10px;
        }

        .payment-option label {
            font-weight: 500;
            cursor: pointer;
        }

        /* Order Summary */
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .summary-table td {
            padding: 10px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .summary-table tr:last-child td {
            border-bottom: none;
            font-weight: 600;
            font-size: 18px;
        }

        .place-order-btn {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            font-weight: 600;
        }

        /* Utilities */
        .text-center {
            text-align: center;
        }

        .text-danger {
            color: var(--danger-color);
        }

        .mb-3 {
            margin-bottom: 15px;
        }

        .mt-3 {
            margin-top: 15px;
        }

        .d-none {
            display: none;
        }

        .d-flex {
            display: flex;
        }

        .align-center {
            align-items: center;
        }

        .justify-between {
            justify-content: space-between;
        }

        .gap-2 {
            gap: 10px;
        }
    </style>


    <div class="container">
        <h1 class="mt-3">Checkout</h1>
        
        <div class="checkout-grid">
            <div class="left-column">
                <!-- Address Section -->
                <div class="card">
                    <div class="card-header">
                        <h3>Delivery Address</h3>
                    </div>
                    <div id="addressesContainer">
                        <%-include ('../../user/checkout/checkout-partials/3address-forms') %>
                    </div>
                </div>
                
                <!-- Order Items -->
                <div class="card">
                    <div class="card-header">
                        <h3>Order Items</h3>
                    </div>
                    <div class="table-responsive">
                        <table class="cart-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Subtotal</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (userCart && userCart.items.length> 0) { %>
                                    <% for (let i=0; i < userCart.items.length;i++) { %>
                                        <tr>
                                            <td>
                                                <div class="product-info">
                                                    <img src="/uploads/resized-images/<%= userCart.items[i].productDetails.productImage[0] %>" 
                                                         alt="<%= userCart.items[i].productDetails.productName %>" class="product-image">
                                                    <div class="product-details">
                                                        <h5><%= userCart.items[i].productDetails.productName %></h5>
                                                        <p>
                                                            <%= userCart.items[i].productDetails.category?.name %><br>
                                                            <%= userCart.items[i].productDetails.brand?.brandName %>
                                                        </p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                ₹<%= userCart.items[i].productDetails.salePrice %>
                                                <br>
                                                <small>
                                                    <strike>₹<%= userCart.items[i].productDetails.regularPrice %></strike>
                                                </small>
                                            </td>
                                            <td>
                                                <% if(userCart.items[i].productDetails.quantity !==0 ){ %>
                                                    <div class="quantity-control">
                                                        <button class="quantity-btn" onclick="changeQuantity(
                                                            '<%= userCart.items[i].productDetails._id %>',
                                                            -1,
                                                            '<%= userCart.items[i].productDetails.salePrice %>',
                                                            '<%= grandTotal %>'
                                                        )">-</button>
                                                        
                                                        <input class="quantity-input" 
                                                            id="cartProductQuantity<%= userCart.items[i].productDetails._id %>"
                                                            value="<%=userCart.items[i].quantity %>" type="text" readonly>
                                                        
                                                        <button class="quantity-btn" onclick="changeQuantity(
                                                            '<%= userCart.items[i].productDetails._id %>',
                                                            1,
                                                            '<%= userCart.items[i].productDetails.salePrice %>',
                                                            '<%= grandTotal %>'
                                                        )">+</button>
                                                    </div>
                                                <% } else { %>
                                                    <span class="text-danger">Out of Stock</span>
                                                <% } %>
                                                
                                                <div>
                                                    <strong id="outOfStockMessage<%= userCart.items[i].productDetails._id %>" class="text-danger"></strong>
                                                </div>
                                            </td>
                                            <td>
                                                ₹<span id="subTotal<%= userCart.items[i].productDetails._id %>">
                                                    <%= userCart.items[i].productDetails.salePrice * userCart.items[i].quantity %>
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline" onclick="removeItem('<%= userCart.items[i].productDetails._id %>')">
                                                    <i class="fas fa-trash"></i> Remove
                                                </button>
                                            </td>
                                        </tr>
                                    <% } %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="text-center">
                                            <p>No items found in your cart</p>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Payment Method -->
                <div class="card">
                    <div class="card-header">
                        <h3>Payment Method</h3>
                    </div>
                    <div class="payment-option">
                        <input type="radio" name="paymentMethod" id="COD" value="COD" required 
                               onchange="document.querySelectorAll('.payment-option').forEach(el => el.classList.remove('selected')); this.closest('.payment-option').classList.add('selected')">
                        <label for="COD"> 
                            <i class="fas fa-money-bill-wave"></i> Cash On Delivery
                        </label>
                    </div>
                    
                    <div class="payment-option">
                        <input type="radio" name="paymentMethod" id="onlinePayment" value="onlinePayment"
                               onchange="document.querySelectorAll('.payment-option').forEach(el => el.classList.remove('selected')); this.closest('.payment-option').classList.add('selected')">
                        <label for="onlinePayment">
                            <i class="fas fa-mobile-alt"></i> Cards/Netbanking/Wallet
                        </label>
                    </div>
                    <% const grandTotalAmount=grandTotal %>
                    <% const walletBalance=userWallet.balance %>
                    <% console.log(grandTotalAmount) %>
                    <% if(grandTotalAmount <= walletBalance){ %>

                    <div class="payment-option">
                        <input type="radio" name="paymentMethod" id="walletPayment" value="walletPayment"
                               onchange="document.querySelectorAll('.payment-option').forEach(el => el.classList.remove('selected')); this.closest('.payment-option').classList.add('selected')">
                        <label for="walletPayment">
                            <i class="fas fa-mobile-alt"></i> TeeSpace Wallet TeeSpace Wallet - <small> (Avaiable Balance: Rs.<%= userWallet.balance %>/-)</small>
                        </label>
                    </div>
                    <% }else{ %>
                        <div class="payment-option" style=" color: gray;">
                            <input type="radio" name="paymentMethod" id="walletPayment" value="walletPayment" disabled
                                onchange="document.querySelectorAll('.payment-option').forEach(el => el.classList.remove('selected')); this.closest('.payment-option').classList.add('selected')">
                            <label for="walletPayment">
                                <i class="fas fa-mobile-alt"></i> TeeSpace Wallet - (Avaiable Balance: Rs.<%= userWallet.balance %>/-)
                            </label>
                        </div>
                    <% } %>
                </div>
            </div>
            
            <div class="right-column">
                <!-- Order Summary -->
                <div class="card">
                    <div class="card-header">
                        <h3>Order Summary</h3>
                    </div>
                    <table class="summary-table">
                        <tr>
                            <td>Subtotal</td>
                            <td class="text-right">--</td>
                        </tr>
                        <tr>
                            <td>Shipping</td>
                            <td class="text-right">Free</td>
                        </tr>
                        <tr>
                            <td>Total</td>
                            <td class="text-right">
                                ₹<span id="grandTotal" data-grand-total="<%= grandTotal %>">
                                    <strong><%= grandTotal %></strong>
                                </span>
                            </td>
                        </tr>
                    </table>
                    
                    <form action="/place-order" method="post" id="checkoutForm">
                        <input type="hidden" name="addressId">
                        <input type="hidden" id="cartId" name="cartId" value="<%= userCart ? userCart._id : '' %>">
                        <input type="hidden" name="paymentMethod">
                        <button type="button" id="placeOrderBtn" class="btn btn-primary place-order-btn">
                            <i class="fas fa-shopping-bag"></i> Place Order
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <%-include ('../../../views/partials/user/footer') %>

    <!-- Include SweetAlert2 for alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
    <script>
    // Show/hide the "add new address" form
    function showAddAddressForm() {
        document.getElementById("addNewAddressFormContainer").style.display = "block";
    }

    function hideAddAddressForm() {
        document.getElementById("addNewAddressFormContainer").style.display = "none";
        // optionally clear form fields
        const form = document.getElementById("addAddressForm");
        if (form) form.reset();
    }

    // Event delegation for ALL forms inside addressesContainer
    document.getElementById("addressesContainer").addEventListener("submit", async (e) => {
        e.preventDefault();
        
        const form = e.target;

        // --- Add New Address Form ---
        if (form.id === "addAddressForm") {
            clearErrorMessages();
            const formData = Object.fromEntries(new FormData(form));
            const { addressType, name, city, landMark, state, pincode, phone, altPhone } = formData;

            let isValid = true;
            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (!namePattern.test(addressType)) {
                document.getElementById('addressType-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(name)) {
                document.getElementById('addressName-error').innerHTML = "Name should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(city)) {
                document.getElementById('addressCity-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(landMark)) {
                document.getElementById('addressLandmark-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(state)) {
                document.getElementById('addressState-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!pincodePattern.test(pincode)) {
                document.getElementById('addressPincode-error').innerHTML = "Pincode should be a 6-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(phone)) {
                document.getElementById('addressPhone-error').innerHTML = "Phone number should be a 10-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(altPhone)) {
                document.getElementById('addressAltPhone-error').innerHTML = "Alternate phone number should be a 10-digit number.";
                isValid = false;
            }
            if (phone === altPhone) {
                document.getElementById('addressAltPhone-error').innerHTML = "Phone number and alternate phone number should be different.";
                isValid = false;
            }

            if (!isValid) return;

            const response = await fetch('/add-address-in-checkout', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                let html = await response.text();
                document.getElementById('addressesContainer').innerHTML = html;
                // no need to rebind, delegation still works
            }
        }

        // --- Edit Address Form ---
        if (form.id.startsWith("editAddressForm")) {
            const index = form.id.replace("editAddressForm", "");
            clearErrorMessages();

            const formData = Object.fromEntries(new FormData(form));
            const { addressType, name, city, landMark, state, pincode, phone, altPhone } = formData;

            let isValid = true;
            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (!namePattern.test(addressType)) {
                document.getElementById('addressType-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(name)) {
                document.getElementById('addressName-error' + index).innerHTML = "Name should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(city)) {
                document.getElementById('addressCity-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(landMark)) {
                document.getElementById('addressLandmark-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(state)) {
                document.getElementById('addressState-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!pincodePattern.test(pincode)) {
                document.getElementById('addressPincode-error' + index).innerHTML = "Pincode should be a 6-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(phone)) {
                document.getElementById('addressPhone-error' + index).innerHTML = "Phone number should be a 10-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(altPhone)) {
                document.getElementById('addressAltPhone-error' + index).innerHTML = "Alternate phone number should be a 10-digit number.";
                isValid = false;
            }
            if (phone === altPhone) {
                document.getElementById('addressAltPhone-error' + index).innerHTML = "Phone number and alternate phone number should be different.";
                isValid = false;
            }

            if (!isValid) return;

            const response = await fetch('/edit-address-in-checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                let html = await response.text();
                document.getElementById('addressesContainer').innerHTML = html;
                // still works because delegation catches new forms
            }
        }
    });

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(el => el.innerHTML = "");
    }

    // Keep show/hide logic for Edit button
    function showEditAddressForm(index) {
        const container = document.getElementById(`editAddressFormContainer${index}`);
        const btn = document.getElementById(`editFormBtn${index}`);

        if (container.style.display === 'block') {
            container.style.display = 'none';
            btn.innerHTML = "<i class='fas fa-edit'></i> Edit";
        } else {
            container.style.display = 'block';
            btn.innerHTML = "<i class='fas fa-times'></i> Cancel";
        }
    }
</script>

<script>
    async function changeQuantity(productId,count,saleprice,grandTotal){
        document.getElementById(`outOfStockMessage${productId}`).innerHTML="";

        const currentQtyElement=document.getElementById(`cartProductQuantity${productId}`);
        let currentQty=currentQtyElement.value;
        const subtotalElement=document.getElementById(`subTotal${productId}`);
        const grandTotalElement=document.getElementById('grandTotal');
        
        if(parseInt(currentQty)+count > 3){
            return Swal.fire({
                title:"Maximum limit is 3",
                icon:'warning',
                timer:3000
            })
        }
        if(parseInt(currentQty)+count <1 || parseInt(currentQty)+count <0){
            return;
        }

        const response=await fetch('/change-cart-quantity',{
            method:'post',
            headers:{
                'Content-Type':'application/json',
            },
            body:JSON.stringify({
                productId:productId,
                count:count
            })
        })

        if(response.ok){
            const result= await response.json()
            if(result.status){
                let newQty=parseInt(currentQty)+count;
                currentQtyElement.value=newQty;
                subtotalElement.innerHTML=parseFloat(saleprice) * newQty;
            }else{
                let newQty=parseInt(result.updatedCartProductQty);
                if(newQty===0){
                document.getElementById(`outOfStockMessage${productId}`).innerHTML="Out of Stock";
                }
                
                currentQtyElement.value=newQty;
                subtotalElement.innerHTML=parseFloat(saleprice) * newQty;
                Swal.fire({
                    title:"Sorry, Only limited stock available",
                    icon:"warning",
                    timer: 3000
                })
            }
            // Update grand total from backend
            grandTotalElement.innerHTML =`<strong>${result.grandTotal}</strong>`;
            grandTotalElement.dataset.grandTotal=result.grandTotal;
        }
    }     

    async function removeItem(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "This item will be removed from your cart",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/delete-cart-item/${productId}`, {
                    method: 'DELETE'
                })
                .then(res => {
                    if (res.ok) {
                        Swal.fire({
                            title: 'Removed!',
                            text: 'Item has been removed from your cart.',
                            icon: 'success',
                            timer: 2000
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                });
            }
        })
    }

    document.addEventListener('DOMContentLoaded',()=>{
        const checkouPageLinkElement=document.getElementById('checkoutPageLink');
        if (checkouPageLinkElement) {
            checkouPageLinkElement.addEventListener('click',(e)=>{
                const grandTotalElement=document.getElementById('grandTotal');
                const grandTotal=parseFloat (grandTotalElement.dataset.grandTotal);
                if(grandTotal===0){
                    e.preventDefault();
                    Swal.fire({
                        title:"Add products in the cart",
                        icon:"warning",
                        timer: 3000
                    })
                }
            })
        }
    })
</script>

<script>
    document.getElementById("placeOrderBtn").addEventListener("click",async () => {
        const grandTotalElement=document.getElementById('grandTotal');
        const grandTotal=parseFloat (grandTotalElement.dataset.grandTotal);

        if(grandTotal===0){
            Swal.fire({
                title:"No products selected",
                icon:"warning",
                timer: 3000
            })
            return;
        }
        
        const selectedAddress = document.querySelector("input[name='addressId']:checked");
        const selectedPayment = document.querySelector("input[name='paymentMethod']:checked");
        console.log("selectedPayment=====>",selectedPayment)
        const cartId = document.getElementById("cartId").value;

        if (!selectedAddress) {
            Swal.fire({
                title:"Please add a delivery address",
                icon:'warning',
                timer: 3000
            })
            return;
        }

        if (!selectedPayment) {
            Swal.fire({
                title:"Please select a payment method",
                icon:'warning',
                timer: 3000
            })
            return;
        }

        // Submit final form
        const formData={
            cartId:cartId,
            addressId:selectedAddress.value,
            paymentMethod:selectedPayment.value
        }
        if(selectedPayment.value==="COD"){
            try {
                const response=await fetch('/place-cod-order',{
                    method:'post',
                    headers:{
                        'Content-Type':'application/json'
                    },
                    body:JSON.stringify(formData)
                })
                const res= await response.json();

                if(res.success){
                    Swal.fire({
                        title:"Order Placed Successfully!",
                        icon:"success",
                        timer:2000
                    }).then(() => {
                        window.location.href=`/order-success/${res.orderId}`;
                    });
                }else{
                    Swal.fire({
                        title: "Order Failed",
                        text: res.message,
                        icon: "error"
                    }).then(() => {
                        location.reload();
                    });
                }
            } catch (error) {
                console.log("Something went wrong:",error);
                Swal.fire({
                    title: "Error",
                    text: "Something went wrong. Please try again.",
                    icon: "error"
                });
            }
        }
        if(selectedPayment.value==="onlinePayment"){
            const response=await fetch('/create-razorpay-order',{
                method:"POST",
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify({cartId})
            })
            const razorpayOrder = await response.json();
            console.log("razorpayOrder=====>",razorpayOrder)
            console.log("razorpayOrder.amount=====>",razorpayOrder.amount)
            console.log("razorpayOrder.order?.amount=====>",razorpayOrder.order?.amount)
            var options ={
                "key":'<%= razorPayKeyId %>',
                "amount": razorpayOrder.order?.amount,
                "currency": "INR",
                "name": "TeeSpace",
                "description": "Test Transaction",
                "order_id": razorpayOrder.order?.id,
                "handler": async function (response) {
                    // Send payment details to server for verification
                    const verify = await fetch("/verify-razorpay-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(response)
                    });
                    const result = await verify.json();
                    console.log("result=======>",result)
                    // alert(result.message);
                    if(result.success){
                        Swal.fire({
                            title:"Payment verified successfully",
                            showConfirmButton:true,
                            timer:3000,
                            icon:"success"
                        }).then(async ()=>{
                                formData.orderId=razorpayOrder.teeSpaceOrderId;
                                const response=await fetch('/place-online-paid-order',{
                                    method:'post',
                                    headers:{
                                        'Content-Type':'application/json'
                                    },
                                    body:JSON.stringify(formData)
                                })
                                const res= await response.json();

                                if(res.success){
                                    Swal.fire({
                                        title:"Order placed successfully",
                                        icon:"success",
                                        showConfirmButton:true,
                                        timer:5000
                                    }).then(()=>{
                                        window.location.href=`/order-success/${res.orderId}`
                                    })
                                }
                            })
                    }else{
                        // alert("Payment verification failed")
                        Swal.fire("Payment verfication failed","","error")
                    }
                    
                },
                "theme": {
                    "color": "#3399cc"
                }
            }
            var rzp1 = new Razorpay(options);
            rzp1.open();
        }

        if(selectedPayment.value==="walletPayment"){
            const response=await fetch('/place-wallet-paid-order',{
                method:"POST",
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify(formData)
            })

            const result=await response.json()
            
            if(result.success){
                Swal.fire({
                    title:"Order placed successfully",
                    text:"Paid by Wallet Money",
                    icon:"success",
                    showConfirmButton:true,
                    timer:5000
                }).then(()=>{
                    window.location.href=`/order-success/${result.orderId}`
                })
            }else{
                Swal.fire(result.message,"","error")
            }
        }

        
    });
</script>