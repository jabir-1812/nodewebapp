<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    :root {
        --primary-color: #3b71fe;
        --secondary-color: #f8f9fa;
        --accent-color: #ff6b6b;
        --text-color: #333;
        --light-text: #6c757d;
        --border-color: #dee2e6;
        --success-color: #28a745;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f7fb;
        color: var(--text-color);
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-color), #2c5cc5);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .container-main {
        background: white;
        border-radius: 12px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.05);
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .section-title {
        position: relative;
        padding-bottom: 15px;
        margin-bottom: 25px;
        font-weight: 600;
        color: var(--primary-color);
    }

    .section-title:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 50px;
        height: 3px;
        background-color: var(--primary-color);
        border-radius: 3px;
    }

    .address-card {
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
        background-color: white;
    }

    .address-card:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        transform: translateY(-3px);
    }

    .address-card.selected {
        border-color: var(--primary-color);
        background-color: rgba(59, 113, 254, 0.05);
    }

    .address-type {
        display: inline-block;
        background: var(--primary-color);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        margin-bottom: 0.75rem;
    }

    .btn-edit-address {
        background: transparent;
        color: var(--primary-color);
        border: 1px solid var(--primary-color);
        padding: 0.4rem 0.9rem;
        border-radius: 6px;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .btn-edit-address:hover {
        background: var(--primary-color);
        color: white;
    }

    .address-form {
        background: var(--secondary-color);
        border-radius: 8px;
        padding: 1.5rem;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
        border-left: 4px solid var(--primary-color);
    }

    .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--secondary-color);
        border: 1px solid var(--border-color);
        font-size: 1rem;
        font-weight: bold;
    }

    .quantity-input {
        width: 45px;
        text-align: center;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        margin: 0 0.5rem;
        padding: 0.25rem;
    }

    .payment-method-card {
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .payment-method-card:hover,
    .payment-method-card.selected {
        border-color: var(--primary-color);
        background-color: rgba(59, 113, 254, 0.05);
    }

    .cart-totals {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .btn-place-order {
        background: var(--success-color);
        color: white;
        padding: 0.8rem 2rem;
        border-radius: 8px;
        font-weight: 600;
        border: none;
        width: 100%;
        transition: all 0.3s;
        margin-top: 1.5rem;
    }

    .btn-place-order:hover {
        background: #218838;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .error-message {
        color: var(--accent-color);
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }

    .text-strike {
        text-decoration: line-through;
        color: var(--light-text);
    }

    .add-address-btn {
        background: transparent;
        color: var(--primary-color);
        border: 2px dashed var(--primary-color);
        padding: 1rem;
        border-radius: 8px;
        width: 100%;
        font-weight: 600;
        transition: all 0.3s;
        margin-bottom: 1.5rem;
    }

    .add-address-btn:hover {
        background: rgba(59, 113, 254, 0.1);
    }

    @media (max-width: 768px) {
        .container-main {
            padding: 1rem;
        }

        .address-card {
            padding: 1rem;
        }
    }
</style>
</head>

<body>
    <%-include ('../../views/partials/user/header') %>

        <div class="page-header">
            <div class="container">
                <h1 class="text-center mb-0">Checkout</h1>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <!-- Left Column - Address and Payment -->
                <div class="col-lg-8">
                    <!-- Address Section -->
                    <div class="container-main mb-4">
                        <h3 class="section-title">Select Delivery Address</h3>

                        <div id="addressesContainer">
                            <%-include ('../user/checkout/partials/2address-forms') %>
                        </div>
                    </div>

                    <!-- Payment Method Section -->
                    <div class="container-main mb-4">
                        <h3 class="section-title">Payment Method</h3>

                        <div class="payment-method-card selected" id="codCard" onclick="selectPayment('COD')">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="COD" value="COD"
                                    checked>
                                <label class="form-check-label w-100" for="COD">
                                    <strong>Cash On Delivery</strong>
                                    <p class="mb-0 text-muted">Pay when you receive your order</p>
                                </label>
                            </div>
                        </div>

                        <div class="payment-method-card" id="upiCard" onclick="selectPayment('UPI')">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="UPI" value="UPI">
                                <label class="form-check-label w-100" for="UPI">
                                    <strong>UPI Payment</strong>
                                    <p class="mb-0 text-muted">Pay instantly using UPI</p>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Order Summary -->
                <div class="col-lg-4">
                    <div class="container-main sticky-top" style="top: 20px;">
                        <h3 class="section-title">Order Summary</h3>

                        <% if (userCart && userCart.items.length> 0) { %>
                            <div class="table-responsive">
                                <table class="table">
                                    <tbody>
                                        <% for (let i=0; i < userCart.items.length; i++) { %>
                                            <tr>
                                                <td>
                                                    <img src="/uploads/resized-images/<%= userCart.items[i].productDetails.productImage[0] %>"
                                                        class="product-image"
                                                        alt="<%= userCart.items[i].productDetails.productName %>">
                                                </td>
                                                <td>
                                                    <strong>
                                                        <%= userCart.items[i].productDetails.productName %>
                                                    </strong>
                                                    <div class="text-muted small">
                                                        <%= userCart.items[i].productDetails.category?.name %> •
                                                            <%= userCart.items[i].productDetails.brand?.brandName %>
                                                    </div>
                                                    <div>
                                                        ₹<%= userCart.items[i].productDetails.salePrice %>
                                                            <span class="text-strike ms-1">₹<%=
                                                                    userCart.items[i].productDetails.regularPrice %>
                                                                    </span>
                                                    </div>
                                                </td>
                                                <td class="text-end">
                                                    <div class="quantity-control">
                                                        <% if(userCart.items[i].productDetails.quantity !==0 ){ %>
                                                            <button class="quantity-btn" onclick="changeQuantity(
                                                                            '<%= userCart.items[i].productDetails._id %>',
                                                                            -1,
                                                                            '<%= userCart.items[i].productDetails.salePrice %>',
                                                                            '<%= grandTotal %>'
                                                                        )">-</button>

                                                            <input class="quantity-input"
                                                                id="cartProductQuantity<%= userCart.items[i].productDetails._id %>"
                                                                value="<%=userCart.items[i].quantity %>" type="text"
                                                                readonly>

                                                            <button class="quantity-btn" onclick="changeQuantity(
                                                                            '<%= userCart.items[i].productDetails._id %>',
                                                                            1,
                                                                            '<%= userCart.items[i].productDetails.salePrice %>',
                                                                            '<%= grandTotal %>'
                                                                        )">+</button>
                                                            <% }else{ %>
                                                                <span class="badge bg-danger">Out of Stock</span>
                                                                <% } %>
                                                    </div>
                                                    <div class="mt-1">
                                                        <strong
                                                            id="outOfStockMessage<%= userCart.items[i].productDetails._id %>"
                                                            class="text-danger small"></strong>
                                                    </div>
                                                </td>
                                            </tr>
                                            <% } %>
                                    </tbody>
                                </table>
                            </div>

                            <div class="border-top pt-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Subtotal</span>
                                    <span>₹<%= grandTotal %></span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Shipping</span>
                                    <span class="text-success">Free</span>
                                </div>
                                <div class="d-flex justify-content-between mt-3 fw-bold fs-5">
                                    <span>Total</span>
                                    <span>₹<span id="grandTotal">
                                            <%= grandTotal %>
                                        </span></span>
                                </div>
                            </div>

                            <form action="/place-order" method="post" id="checkoutForm">
                                <input type="hidden" name="addressId"
                                    value="<%= addresses && addresses.length > 0 ? addresses[0]._id : '' %>">
                                <input type="hidden" id="cartId" name="cartId"
                                    value="<%= userCart ? userCart._id : '' %>">
                                <input type="hidden" name="paymentMethod" value="COD">
                                <button type="button" id="placeOrderBtn" class="btn-place-order">
                                    <i class="fas fa-lock me-2"></i> Place Order
                                </button>
                            </form>
                            <% } else { %>
                                <div class="text-center py-4">
                                    <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                                    <h4>Your cart is empty</h4>
                                    <p class="text-muted">Add items to your cart to proceed with checkout</p>
                                    <a href="/products" class="btn btn-primary">Continue Shopping</a>
                                </div>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>

        <%-include ('../../views/partials/user/footer') %>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script>
                // Function to show edit address form
                function showEditAddressForm(index) {
                    document.getElementById('editAddressFormContainer' + index).style.display = 'block';
                }

                // Function to hide edit address form
                function hideEditAddressForm(index) {
                    document.getElementById('editAddressFormContainer' + index).style.display = 'none';
                }

                // Function to show add address form
                function showAddAddressForm() {
                    document.getElementById('addNewAddressFormContainer').style.display = 'block';
                }

                // Function to hide add address form
                function hideAddAddressForm() {
                    document.getElementById('addNewAddressFormContainer').style.display = 'none';
                }

                // Function to select address visually
                function selectAddress(index) {
                    // Remove selected class from all address cards
                    document.querySelectorAll('.address-card').forEach(card => {
                        card.classList.remove('selected');
                    });

                    // Add selected class to the chosen address
                    document.getElementById('addressCard' + index).classList.add('selected');

                    // Update the hidden input in the checkout form
                    document.querySelector('input[name="addressId"]').value =
                        document.querySelector(`input[name="addressId"]:checked`).value;
                }

                // Function to select payment method visually
                function selectPayment(method) {
                    // Remove selected class from all payment cards
                    document.querySelectorAll('.payment-method-card').forEach(card => {
                        card.classList.remove('selected');
                    });

                    // Add selected class to the chosen payment method
                    document.getElementById(method.toLowerCase() + 'Card').classList.add('selected');

                    // Check the corresponding radio button
                    document.getElementById(method).checked = true;

                    // Update the hidden input in the checkout form
                    document.querySelector('input[name="paymentMethod"]').value = method;
                }

                // Initialize the page
                document.addEventListener('DOMContentLoaded', function () {
                    // Select the first address by default
                    if (document.querySelector('.address-card')) {
                        document.querySelector('.address-card').classList.add('selected');
                    }

                    // Set the initial payment method value
                    document.querySelector('input[name="paymentMethod"]').value = 'COD';
                });
            </script>


<script>
     // Event delegation for ALL forms inside addressesContainer
    document.getElementById("addressesContainer").addEventListener("submit", async (e) => {
        e.preventDefault();
        

        const form = e.target;

        // --- Add New Address Form ---
        if (form.id === "addAddressForm") {
            clearErrorMessages();
            const formData = Object.fromEntries(new FormData(form));
            const { addressType, name, city, landMark, state, pincode, phone, altPhone } = formData;


            let isValid = true;
            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (!namePattern.test(addressType)) {
                document.getElementById('addressType-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(name)) {
                document.getElementById('addressName-error').innerHTML = "Name should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(city)) {
                document.getElementById('addressCity-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(landMark)) {
                document.getElementById('addressLandmark-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(state)) {
                document.getElementById('addressState-error').innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!pincodePattern.test(pincode)) {
                document.getElementById('addressPincode-error').innerHTML = "Pincode should be a 6-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(phone)) {
                document.getElementById('addressPhone-error').innerHTML = "Phone number should be a 10-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(altPhone)) {
                document.getElementById('addressAltPhone-error').innerHTML = "Alternate phone number should be a 10-digit number.";
                isValid = false;
            }
            if (phone === altPhone) {
                document.getElementById('addressAltPhone-error').innerHTML = "Phone number and alternate phone number should be different.";
                isValid = false;
            }

            if (!isValid) return;

            const response = await fetch('/add-address-in-checkout', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                let html = await response.text();
                document.getElementById('addressesContainer').innerHTML = html;
                // no need to rebind, delegation still works
            }
        }

        // --- Edit Address Form ---
        if (form.id.startsWith("editAddressForm")) {
            const index = form.id.replace("editAddressForm", "");
            clearErrorMessages();

            const formData = Object.fromEntries(new FormData(form));
            const { addressType, name, city, landMark, state, pincode, phone, altPhone } = formData;

            let isValid = true;
            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (!namePattern.test(addressType)) {
                document.getElementById('addressType-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(name)) {
                document.getElementById('addressName-error' + index).innerHTML = "Name should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(city)) {
                document.getElementById('addressCity-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(landMark)) {
                document.getElementById('addressLandmark-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!namePattern.test(state)) {
                document.getElementById('addressState-error' + index).innerHTML = "should contain alphabets only.";
                isValid = false;
            }
            if (!pincodePattern.test(pincode)) {
                document.getElementById('addressPincode-error' + index).innerHTML = "Pincode should be a 6-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(phone)) {
                document.getElementById('addressPhone-error' + index).innerHTML = "Phone number should be a 10-digit number.";
                isValid = false;
            }
            if (!phonePattern.test(altPhone)) {
                document.getElementById('addressAltPhone-error' + index).innerHTML = "Alternate phone number should be a 10-digit number.";
                isValid = false;
            }
            if (phone === altPhone) {
                document.getElementById('addressAltPhone-error' + index).innerHTML = "Phone number and alternate phone number should be different.";
                isValid = false;
            }

            if (!isValid) return;

            const response = await fetch('/edit-address-in-checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                let html = await response.text();
                document.getElementById('addressesContainer').innerHTML = html;
                // still works because delegation catches new forms
            }
        }
    });

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(el => el.innerHTML = "");
    }
</script>


<script>
                async function changeQuantity(productId,count,saleprice,grandTotal){
                    // console.log('changeQuantity() started');
                    document.getElementById(`outOfStockMessage${productId}`).innerHTML="";

                    console.log('salePrice======>',saleprice);
                    const currentQtyElement=document.getElementById(`cartProductQuantity${productId}`);
                    let currentQty=currentQtyElement.value;
                    const subtotalElement=document.getElementById(`subTotal${productId}`);
                    const grandTotalElement=document.getElementById('grandTotal');
                    // console.log('current Qty====>',currentQty);
                    if(parseInt(currentQty)+count > 3){
                        return Swal.fire({
                            title:"Maximum limit is 3",
                            icon:'warning',
                            timer:5000
                        })
                    }
                    if(parseInt(currentQty)+count <1 || parseInt(currentQty)+count <0){
                        console.log("minimum limit is 1")
                        return;
                    }


                    const response=await fetch('/change-cart-quantity',{
                        method:'post',
                        headers:{
                            'Content-Type':'application/json',
                        },
                        body:JSON.stringify({
                            productId:productId,
                            count:count
                        })
                    })

                    if(response.ok){
                        const result= await response.json()
                        // console.log("response ok")
                        // console.log(result.message);
                        if(result.status){
                            // console.log('cart qty increased')
                            // console.log(typeof currentQty)
                            let newQty=parseInt(currentQty)+count;
                            currentQtyElement.value=newQty;
                            // currentQtyElement.placeholder=newQty;
                            subtotalElement.innerHTML=parseFloat(saleprice) * newQty;
                            


                        }else{
                            // console.log("cart qty defaulted")
                            // console.log("cartProductQty=====>",result.cartProductQty)
                            let newQty=parseInt(result.updatedCartProductQty);
                            console.log("cartProductQty=====>",result.updatedCartProductQty)
                            if(newQty===0){
                            document.getElementById(`outOfStockMessage${productId}`).innerHTML="Out of Stock";
                            }
                            
                            currentQtyElement.value=newQty;
                            // currentQtyElement.placeholder=newQty;
                            subtotalElement.innerHTML=parseFloat(saleprice) * newQty;
                            Swal.fire({
                                title:"Sorry, Only limited stock available",
                                icon:"warning"
                            })
                        }
                        // Update grand total from backend
                        grandTotalElement.innerHTML =`<h2> ${result.grandTotal}/- </h2>`;
                        grandTotalElement.dataset.grandTotal=result.grandTotal;
                        
                    }

                }     

                async function removeItem(productId) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!'
                }).then((result) => {
                if (result.isConfirmed) {
                        fetch(`/delete-cart-item/${productId}`, {
                            method: 'DELETE'
                        })
                        .then(res => {
                            if (res.ok) {
                            window.location.reload();
                            }
                        });
                        }

                })
                }

                document.addEventListener('DOMContentLoaded',()=>{
                const checkouPageLinkElement=document.getElementById('checkoutPageLink');
                console.log("checkoutLinkElem=======>",checkouPageLinkElement)
                checkouPageLinkElement.addEventListener('click',(e)=>{
                    const grandTotalElement=document.getElementById('grandTotal');
                    const grandTotal=parseFloat (grandTotalElement.dataset.grandTotal);
                    console.log("grandTotal======>",grandTotal);
                    if(grandTotal===0){
                    e.preventDefault();
                    Swal.fire({
                        title:"Add products in the cart",
                        icon:"warning"
                    })
                    }
                })
                })

            </script>


<script>
    document.getElementById("placeOrderBtn").addEventListener("click",async () => {
        const grandTotalElement=document.getElementById('grandTotal');
        const grandTotal=parseFloat (grandTotalElement.dataset.grandTotal);

        if(grandTotal===0){
          Swal.fire({
            title:"No products selected",
            icon:"warning"
          })
          return;
        }
        const selectedAddress = document.querySelector("input[name='addressId']:checked");
        const selectedPayment = document.querySelector("input[name='paymentMethod']:checked");
        const cartId = document.getElementById("cartId").value;

        if (!selectedAddress) {
            Swal.fire({
                title:"Please add a delivery address",
                icon:'warning'
            })
            return;
        }

        if (!selectedPayment) {
            Swal.fire({
                title:"Please select a payment method",
                icon:'warning'
            })
            return;
        }

        // Fill hidden checkout form inputs
        // document.querySelector("#checkoutForm input[name='addressId']").value = selectedAddress.value;
        // document.querySelector("#checkoutForm input[name='cartId']").value = cartId;
        // document.querySelector("#checkoutForm input[name='paymentMethod']").value = selectedPayment.value;

        // Submit final form
        const formData={
            cartId:cartId,
            addressId:selectedAddress.value,
            paymentMethod:selectedPayment.value
        }

        try {
            const response=await fetch('/place-order',{
                method:'post',
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify(formData)
            })
            const res= await response.json();

            if(res.success){
                Swal.fire({
                    title:"Order Placed",
                    icon:"success",
                    timer:2000
                })

                window.location.href=`/order-success/${res.orderId}`
            }else{
                Swal.fire({
                    title: "Order Failed",
                    text: res.message,
                    icon: "error",
                    // confirmButtonText: "OK"
                }).then(() => {
                    console.log("Reload triggered");
                    location.reload();
                });

            }
        } catch (error) {
            console.log("something went wrong:",error)
        }
        
        });
</script>