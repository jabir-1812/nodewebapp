<%- include("../../../../views/partials/user/header") %>
<style>
    .is-invalid {
    border: 1px solid red;
    }
    .error-message {
    color: red;
    font-size: 12px;
    }

</style>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Create User Address</h3>
   <form id="addressForm" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" name="addressType" data-rule="required|addressType">
                <small class="error-message"></small>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" name="name" data-rule="required|min:3|name">
               <small class="error-message"></small>
            </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" name="city" data-rule="required|city">
                <small class="error-message"></small>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" name="landMark" data-rule="required|landMark">
                <small class="error-message"></small>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" name="state" data-rule="required|state">
                <small class="error-message"></small>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" name="pincode" data-rule="required|pincode">
                <small class="error-message"></small>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" name="phone" data-rule="required|phone">
                <small class="error-message"></small>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" name="altPhone" data-rule="required|phone|different:phone">
                <small class="error-message"></small>
           </div>
       </div>
       <button type="submit" class="btn btn-primary">Submit</button>
   </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- <script>
  
   document.getElementById('addressForm').addEventListener('submit', function(event) {
    event.preventDefault();
       if (!validateForm()) {
           return;
       }
       Swal.fire({
            title: "Done",
            text: "New address has been added",
            icon: "success",
            timer: 1500,
            showConfirmButton: false
        }).then(() => {
            form.submit(); // submit after alert auto closes
    });
   });


   function validateForm() {
       let isValid = true;
       const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
       requiredFields.forEach(function(field) {
           const input = document.getElementById(field);
           const inputValue = input.value.trim();
           const errorElement = document.getElementById(field + '-error');


           if (inputValue === "") {
               if (!errorElement) {
                   const errorMessage = "This field is required.";
                   const errorDiv = document.createElement('div');
                   errorDiv.className = "text-danger";
                   errorDiv.textContent = errorMessage;
                   errorDiv.id = field + '-error';
                   input.parentNode.appendChild(errorDiv);
               }
               isValid = false;
           } else {
               if (errorElement) {
                   errorElement.remove();
               }
           }
       });


       const addressType = document.getElementById('addressType').value;
       const name = document.getElementById('name').value;
       const city = document.getElementById('city').value;
       const landMark = document.getElementById('landMark').value;
       const state = document.getElementById('state').value;
       const pincode = document.getElementById('pincode').value;
       const phone = document.getElementById('phone').value;
       const altPhone = document.getElementById('altPhone').value;
       const namePattern = /^[A-Za-z\s]+$/;
       const pincodePattern = /^\d{6}$/;
       const phonePattern = /^\d{10}$/;
       if (!namePattern.test(name)) {
           Swal.fire({
               title: 'Error',
               text: 'Name should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(city)) {
           Swal.fire({
               title: 'Error',
               text: 'City should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(landMark)) {
           Swal.fire({
               title: 'Error',
               text: 'Landmark should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(state)) {
           Swal.fire({
               title: 'Error',
               text: 'State should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!pincodePattern.test(pincode)) {
           Swal.fire({
               title: 'Error',
               text: 'Pincode should be a 6-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!phonePattern.test(phone)) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number should be a 10-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!phonePattern.test(altPhone)) {
           Swal.fire({
               title: 'Error',
               text: 'Alternate phone number should be a 10-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (phone === altPhone) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number and alternate phone number should be different.',
               icon: 'error'
           });
           isValid = false;
       }
       return isValid;
   }
</script> -->
<script>
    document.getElementById("addressForm").addEventListener('submit', async (e)=>{
        e.preventDefault();
        const form=e.target;

        if(validateForm(form)){
            let formData=new FormData(form);
            const data = Object.fromEntries(formData.entries())
            // console.log("data=====>",data)

            const response=await fetch('/add-address',{
                method:"POST",
                headers:{
                    "Content-Type":"application/json"
                },
                body:JSON.stringify(data)
            })
            const result=await response.json()
            if(response.ok){
                Swal.fire({
                   title:"Done",
                   text:"New address has been added",
                   icon:"success",
                   showConfirmButton:true,
                   timer:1000 
                }).then(()=>{
                    window.location.href = '/user-profile/addresses'
                })
            }else{
               Swal.fire("Error",`${result.message}`,"error")
            }
        }
    })
    function validateForm(form){
    let isValid = true;

    const regex = {
        phone: /^\d{10}$/,
        pincode: /^\d{6}$/,
        alphabets: /^[A-Za-z\s]+$/
    };

    form.querySelectorAll("input").forEach((input)=>{
        const rules = input.dataset.rule?.split("|") || [];
        const errorElement = input.nextElementSibling;
        let value = input.value.trim();
        let error = "";

        for(let rule of rules){
            if(rule === "required" && !value){
                error = "This field is required";
                break;
            }

            if(rule.startsWith("min")){
                let min = parseInt(rule.split(":")[1]);
                if(value.length < min){
                    error = `Minimum ${min} characters required`;
                    break;
                }
            }

            if(rule === "phone" && !regex.phone.test(value)){
                error = "Enter a valid 10-digit phone number";
                break;
            }

            if(rule.startsWith("different:")){
                let otherFieldName = rule.split(":")[1];
                let otherInput = form.querySelector(`[name="${otherFieldName}"]`);
                if(otherInput && otherInput.value.trim() === value){
                    error = `This field must be different from ${otherFieldName}`;
                    break;
                }
            }

            if(["name","city","landMark","state"].includes(rule) && !regex.alphabets.test(value)){
                error = `${rule.charAt(0).toUpperCase() + rule.slice(1)} should contain alphabets only.`;
                break;
            }

            if(rule === "pincode" && !regex.pincode.test(value)){
                error = "Pincode should be a 6-digit number.";
                break;
            }
        }

        if(error){
            isValid = false;
            if(errorElement) errorElement.textContent = error;
            input.classList.add("is-invalid");
        } else {
            if(errorElement) errorElement.textContent = "";
            input.classList.remove("is-invalid");
        }
    });

    return isValid;
}


</script>
<%- include("../../../../views/partials/user/footer") %>

